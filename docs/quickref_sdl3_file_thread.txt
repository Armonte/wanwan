SDL_SharedObject * SDL_LoadObject(const char *sofile);                             // Dynamically load a shared object.
SDL_FunctionPointer SDL_LoadFunction(SDL_SharedObject *handle, const char *name);  // Look up the address of the named function in a shared object.
void SDL_UnloadObject(SDL_SharedObject *handle);                                   // Unload a shared object from memory.


SDL_Thread * SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);       // Create a new thread with a default stack size.
SDL_Thread * SDL_CreateThreadWithProperties(SDL_PropertiesID props);                      // Create a new thread with with the specified properties.
const char * SDL_GetThreadName(SDL_Thread *thread);                                       // Get the thread name as it was specified in SDL_CreateThread().
SDL_ThreadID SDL_GetCurrentThreadID(void);                                                // Get the thread identifier for the current thread.
SDL_ThreadID SDL_GetThreadID(SDL_Thread *thread);                                         // Get the thread identifier for the specified thread.
bool SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);                           // Set the priority for the current thread.
void SDL_WaitThread(SDL_Thread *thread, int *status);                                     // Wait for a thread to finish.
SDL_ThreadState SDL_GetThreadState(SDL_Thread *thread);                                   // Get the current state of a thread.
void SDL_DetachThread(SDL_Thread *thread);                                                // Let a thread clean up on exit without intervention.
void * SDL_GetTLS(SDL_TLSID *id);                                                         // Get the current thread's value associated with a thread local storage ID.
bool SDL_SetTLS(SDL_TLSID *id, const void *value, SDL_TLSDestructorCallback destructor);  // Set the current thread's value associated with a thread local storage ID.
void SDL_CleanupTLS(void);                                                                // Cleanup all TLS data for this thread.

const char * SDL_GetBasePath(void);                                                                      // Get the directory where the application was run from.
char * SDL_GetPrefPath(const char *org, const char *app);                                                // Get the user-and-app-specific path where files can be written.
const char * SDL_GetUserFolder(SDL_Folder folder);                                                       // Finds the most suitable user folder for a specific purpose.
bool SDL_CreateDirectory(const char *path);                                                              // Create a directory, and any missing parent directories.
bool SDL_EnumerateDirectory(const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);  // Enumerate a directory through a callback function.
bool SDL_RemovePath(const char *path);                                                                   // Remove a file or an empty directory.
bool SDL_RenamePath(const char *oldpath, const char *newpath);                                           // Rename a file or directory.
bool SDL_CopyFile(const char *oldpath, const char *newpath);                                             // Copy a file.
bool SDL_GetPathInfo(const char *path, SDL_PathInfo *info);                                              // Get information about a filesystem path.
char ** SDL_GlobDirectory(const char *path, const char *pattern, SDL_GlobFlags flags, int *count);       // Enumerate a directory tree, filtered by pattern, and return a list.
char * SDL_GetCurrentDirectory(void);                                                                    // Get what the system believes is the "current working directory."

SDL_IOStream * SDL_IOFromFile(const char *file, const char *mode);                         // Use this function to create a new SDL_IOStream structure for reading from and/or writing to a named file.
SDL_IOStream * SDL_IOFromMem(void *mem, size_t size);                                      // Use this function to prepare a read-write memory buffer for use with SDL_IOStream.
SDL_IOStream * SDL_IOFromConstMem(const void *mem, size_t size);                           // Use this function to prepare a read-only memory buffer for use with SDL_IOStream.
SDL_IOStream * SDL_IOFromDynamicMem(void);                                                 // Use this function to create an SDL_IOStream that is backed by dynamically allocated memory.
SDL_IOStream * SDL_OpenIO(const SDL_IOStreamInterface *iface, void *userdata);             // Create a custom SDL_IOStream.
bool SDL_CloseIO(SDL_IOStream *context);                                                   // Close and free an allocated SDL_IOStream structure.
SDL_PropertiesID SDL_GetIOProperties(SDL_IOStream *context);                               // Get the properties associated with an SDL_IOStream.
SDL_IOStatus SDL_GetIOStatus(SDL_IOStream *context);                                       // Query the stream status of an SDL_IOStream.
Sint64 SDL_GetIOSize(SDL_IOStream *context);                                               // Use this function to get the size of the data stream in an SDL_IOStream.
Sint64 SDL_SeekIO(SDL_IOStream *context, Sint64 offset, SDL_IOWhence whence);              // Seek within an SDL_IOStream data stream.
Sint64 SDL_TellIO(SDL_IOStream *context);                                                  // Determine the current read/write offset in an SDL_IOStream data stream.
size_t SDL_ReadIO(SDL_IOStream *context, void *ptr, size_t size);                          // Read from a data source.
size_t SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);                   // Write to an SDL_IOStream data stream.
size_t SDL_IOprintf(SDL_IOStream *context, const char *fmt, ... ...);                      // Print to an SDL_IOStream data stream.
size_t SDL_IOvprintf(SDL_IOStream *context, const char *fmt, va_list ap);                  // Print to an SDL_IOStream data stream.
bool SDL_FlushIO(SDL_IOStream *context);                                                   // Flush any buffered data in the stream.
void * SDL_LoadFile_IO(SDL_IOStream *src, size_t *datasize, bool closeio);                 // Load all the data from an SDL data stream.
void * SDL_LoadFile(const char *file, size_t *datasize);                                   // Load all the data from a file path.
bool SDL_SaveFile_IO(SDL_IOStream *src, const void *data, size_t datasize, bool closeio);  // Save all the data into an SDL data stream.
bool SDL_SaveFile(const char *file, const void *data, size_t datasize);                    // Save all the data into a file path.
bool SDL_ReadU8(SDL_IOStream *src, Uint8 *value);                                          // Use this function to read a byte from an SDL_IOStream.
bool SDL_ReadS8(SDL_IOStream *src, Sint8 *value);                                          // Use this function to read a signed byte from an SDL_IOStream.
bool SDL_ReadU16LE(SDL_IOStream *src, Uint16 *value);                                      // Use this function to read 16 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS16LE(SDL_IOStream *src, Sint16 *value);                                      // Use this function to read 16 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadU16BE(SDL_IOStream *src, Uint16 *value);                                      // Use this function to read 16 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS16BE(SDL_IOStream *src, Sint16 *value);                                      // Use this function to read 16 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadU32LE(SDL_IOStream *src, Uint32 *value);                                      // Use this function to read 32 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS32LE(SDL_IOStream *src, Sint32 *value);                                      // Use this function to read 32 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadU32BE(SDL_IOStream *src, Uint32 *value);                                      // Use this function to read 32 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS32BE(SDL_IOStream *src, Sint32 *value);                                      // Use this function to read 32 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadU64LE(SDL_IOStream *src, Uint64 *value);                                      // Use this function to read 64 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS64LE(SDL_IOStream *src, Sint64 *value);                                      // Use this function to read 64 bits of little-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadU64BE(SDL_IOStream *src, Uint64 *value);                                      // Use this function to read 64 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_ReadS64BE(SDL_IOStream *src, Sint64 *value);                                      // Use this function to read 64 bits of big-endian data from an SDL_IOStream and return in native format.
bool SDL_WriteU8(SDL_IOStream *dst, Uint8 value);                                          // Use this function to write a byte to an SDL_IOStream.
bool SDL_WriteS8(SDL_IOStream *dst, Sint8 value);                                          // Use this function to write a signed byte to an SDL_IOStream.
bool SDL_WriteU16LE(SDL_IOStream *dst, Uint16 value);                                      // Use this function to write 16 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteS16LE(SDL_IOStream *dst, Sint16 value);                                      // Use this function to write 16 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteU16BE(SDL_IOStream *dst, Uint16 value);                                      // Use this function to write 16 bits in native format to an SDL_IOStream as big-endian data.
bool SDL_WriteS16BE(SDL_IOStream *dst, Sint16 value);                                      // Use this function to write 16 bits in native format to an SDL_IOStream as big-endian data.
bool SDL_WriteU32LE(SDL_IOStream *dst, Uint32 value);                                      // Use this function to write 32 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteS32LE(SDL_IOStream *dst, Sint32 value);                                      // Use this function to write 32 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteU32BE(SDL_IOStream *dst, Uint32 value);                                      // Use this function to write 32 bits in native format to an SDL_IOStream as big-endian data.
bool SDL_WriteS32BE(SDL_IOStream *dst, Sint32 value);                                      // Use this function to write 32 bits in native format to an SDL_IOStream as big-endian data.
bool SDL_WriteU64LE(SDL_IOStream *dst, Uint64 value);                                      // Use this function to write 64 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteS64LE(SDL_IOStream *dst, Sint64 value);                                      // Use this function to write 64 bits in native format to an SDL_IOStream as little-endian data.
bool SDL_WriteU64BE(SDL_IOStream *dst, Uint64 value);                                      // Use this function to write 64 bits in native format to an SDL_IOStream as big-endian data.
bool SDL_WriteS64BE(SDL_IOStream *dst, Sint64 value);                                      // Use this function to write 64 bits in native format to an SDL_IOStream as big-endian data.
