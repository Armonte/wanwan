

int SDL_AddGamepadMapping(const char *mapping);                                                                                      // Add support for gamepads that SDL is unaware of or change the binding of an existing gamepad.
int SDL_AddGamepadMappingsFromIO(SDL_IOStream *src, bool closeio);                                                                   // Load a set of gamepad mappings from an SDL_IOStream.
int SDL_AddGamepadMappingsFromFile(const char *file);                                                                                // Load a set of gamepad mappings from a file.
bool SDL_ReloadGamepadMappings(void);                                                                                                // Reinitialize the SDL mapping database to its initial state.
char ** SDL_GetGamepadMappings(int *count);                                                                                          // Get the current gamepad mappings.
char * SDL_GetGamepadMappingForGUID(SDL_GUID guid);                                                                                  // Get the gamepad mapping string for a given GUID.
char * SDL_GetGamepadMapping(SDL_Gamepad *gamepad);                                                                                  // Get the current mapping of a gamepad.
bool SDL_SetGamepadMapping(SDL_JoystickID instance_id, const char *mapping);                                                         // Set the current mapping of a joystick or gamepad.
bool SDL_HasGamepad(void);                                                                                                           // Return whether a gamepad is currently connected.
SDL_JoystickID * SDL_GetGamepads(int *count);                                                                                        // Get a list of currently connected gamepads.
bool SDL_IsGamepad(SDL_JoystickID instance_id);                                                                                      // Check if the given joystick is supported by the gamepad interface.
const char * SDL_GetGamepadNameForID(SDL_JoystickID instance_id);                                                                    // Get the implementation dependent name of a gamepad.
const char * SDL_GetGamepadPathForID(SDL_JoystickID instance_id);                                                                    // Get the implementation dependent path of a gamepad.
int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);                                                                      // Get the player index of a gamepad.
SDL_GUID SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);                                                                        // Get the implementation-dependent GUID of a gamepad.
Uint16 SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);                                                                        // Get the USB vendor ID of a gamepad, if available.
Uint16 SDL_GetGamepadProductForID(SDL_JoystickID instance_id);                                                                       // Get the USB product ID of a gamepad, if available.
Uint16 SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);                                                                // Get the product version of a gamepad, if available.
SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);                                                                 // Get the type of a gamepad.
SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);                                                             // Get the type of a gamepad, ignoring any mapping override.
char * SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);                                                                       // Get the mapping of a gamepad.
SDL_Gamepad * SDL_OpenGamepad(SDL_JoystickID instance_id);                                                                           // Open a gamepad for use.
SDL_Gamepad * SDL_GetGamepadFromID(SDL_JoystickID instance_id);                                                                      // Get the SDL_Gamepad associated with a joystick instance ID, if it has been opened.
SDL_Gamepad * SDL_GetGamepadFromPlayerIndex(int player_index);                                                                       // Get the SDL_Gamepad associated with a player index.
SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad *gamepad);                                                                     // Get the properties associated with an opened gamepad.
SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad *gamepad);                                                                               // Get the instance ID of an opened gamepad.
const char * SDL_GetGamepadName(SDL_Gamepad *gamepad);                                                                               // Get the implementation-dependent name for an opened gamepad.
const char * SDL_GetGamepadPath(SDL_Gamepad *gamepad);                                                                               // Get the implementation-dependent path for an opened gamepad.
SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad *gamepad);                                                                            // Get the type of an opened gamepad.
SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad *gamepad);                                                                        // Get the type of an opened gamepad, ignoring any mapping override.
int SDL_GetGamepadPlayerIndex(SDL_Gamepad *gamepad);                                                                                 // Get the player index of an opened gamepad.
bool SDL_SetGamepadPlayerIndex(SDL_Gamepad *gamepad, int player_index);                                                              // Set the player index of an opened gamepad.
Uint16 SDL_GetGamepadVendor(SDL_Gamepad *gamepad);                                                                                   // Get the USB vendor ID of an opened gamepad, if available.
Uint16 SDL_GetGamepadProduct(SDL_Gamepad *gamepad);                                                                                  // Get the USB product ID of an opened gamepad, if available.
Uint16 SDL_GetGamepadProductVersion(SDL_Gamepad *gamepad);                                                                           // Get the product version of an opened gamepad, if available.
Uint16 SDL_GetGamepadFirmwareVersion(SDL_Gamepad *gamepad);                                                                          // Get the firmware version of an opened gamepad, if available.
const char * SDL_GetGamepadSerial(SDL_Gamepad *gamepad);                                                                             // Get the serial number of an opened gamepad, if available.
Uint64 SDL_GetGamepadSteamHandle(SDL_Gamepad *gamepad);                                                                              // Get the Steam Input handle of an opened gamepad, if available.
SDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad *gamepad);                                                     // Get the connection state of a gamepad.
SDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad *gamepad, int *percent);                                                          // Get the battery state of a gamepad.
bool SDL_GamepadConnected(SDL_Gamepad *gamepad);                                                                                     // Check if a gamepad has been opened and is currently connected.
SDL_Joystick * SDL_GetGamepadJoystick(SDL_Gamepad *gamepad);                                                                         // Get the underlying joystick from a gamepad.
void SDL_SetGamepadEventsEnabled(bool enabled);                                                                                      // Set the state of gamepad event processing.
bool SDL_GamepadEventsEnabled(void);                                                                                                 // Query the state of gamepad event processing.
SDL_GamepadBinding ** SDL_GetGamepadBindings(SDL_Gamepad *gamepad, int *count);                                                      // Get the SDL joystick layer bindings for a gamepad.
void SDL_UpdateGamepads(void);                                                                                                       // Manually pump gamepad updates if not using the loop.
SDL_GamepadType SDL_GetGamepadTypeFromString(const char *str);                                                                       // Convert a string into SDL_GamepadType enum.
const char * SDL_GetGamepadStringForType(SDL_GamepadType type);                                                                      // Convert from an SDL_GamepadType enum to a string.
SDL_GamepadAxis SDL_GetGamepadAxisFromString(const char *str);                                                                       // Convert a string into SDL_GamepadAxis enum.
const char * SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);                                                                      // Convert from an SDL_GamepadAxis enum to a string.
bool SDL_GamepadHasAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);                                                                 // Query whether a gamepad has a given axis.
Sint16 SDL_GetGamepadAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);                                                               // Get the current state of an axis control on a gamepad.
SDL_GamepadButton SDL_GetGamepadButtonFromString(const char *str);                                                                   // Convert a string into an SDL_GamepadButton enum.
const char * SDL_GetGamepadStringForButton(SDL_GamepadButton button);                                                                // Convert from an SDL_GamepadButton enum to a string.
bool SDL_GamepadHasButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);                                                           // Query whether a gamepad has a given button.
bool SDL_GetGamepadButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);                                                           // Get the current state of a button on a gamepad.
SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);                             // Get the label of a button on a gamepad.
SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad *gamepad, SDL_GamepadButton button);                                    // Get the label of a button on a gamepad.
int SDL_GetNumGamepadTouchpads(SDL_Gamepad *gamepad);                                                                                // Get the number of touchpads on a gamepad.
int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad *gamepad, int touchpad);                                                            // Get the number of supported simultaneous fingers on a touchpad on a game gamepad.
bool SDL_GetGamepadTouchpadFinger(SDL_Gamepad *gamepad, int touchpad, int finger, bool *down, float *x, float *y, float *pressure);  // Get the current state of a finger on a touchpad on a gamepad.
bool SDL_GamepadHasSensor(SDL_Gamepad *gamepad, SDL_SensorType type);                                                                // Return whether a gamepad has a particular sensor.
bool SDL_SetGamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type, bool enabled);                                           // Set whether data reporting for a gamepad sensor is enabled.
bool SDL_GamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type);                                                            // Query whether sensor data reporting is enabled for a gamepad.
float SDL_GetGamepadSensorDataRate(SDL_Gamepad *gamepad, SDL_SensorType type);                                                       // Get the data rate (number of events per second) of a gamepad sensor.
bool SDL_GetGamepadSensorData(SDL_Gamepad *gamepad, SDL_SensorType type, float *data, int num_values);                               // Get the current state of a gamepad sensor.
bool SDL_RumbleGamepad(SDL_Gamepad *gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);         // Start a rumble effect on a gamepad.
bool SDL_RumbleGamepadTriggers(SDL_Gamepad *gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);                   // Start a rumble effect in the gamepad's triggers.
bool SDL_SetGamepadLED(SDL_Gamepad *gamepad, Uint8 red, Uint8 green, Uint8 blue);                                                    // Update a gamepad's LED color.
bool SDL_SendGamepadEffect(SDL_Gamepad *gamepad, const void *data, int size);                                                        // Send a gamepad specific effect packet.
void SDL_CloseGamepad(SDL_Gamepad *gamepad);                                                                                         // Close a gamepad previously opened with SDL_OpenGamepad().
const char * SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);                              // Return the sfSymbolsName for a given button on a gamepad on Apple platforms.
const char * SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);                                    // Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.



void SDL_LockJoysticks(void);                                                                                                                     // Locking for atomic access to the joystick API.
void SDL_UnlockJoysticks(void);                                                                                                                   // Unlocking for atomic access to the joystick API.
bool SDL_HasJoystick(void);                                                                                                                       // Return whether a joystick is currently connected.
SDL_JoystickID * SDL_GetJoysticks(int *count);                                                                                                    // Get a list of currently connected joysticks.
const char * SDL_GetJoystickNameForID(SDL_JoystickID instance_id);                                                                                // Get the implementation dependent name of a joystick.
const char * SDL_GetJoystickPathForID(SDL_JoystickID instance_id);                                                                                // Get the implementation dependent path of a joystick.
int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);                                                                                  // Get the player index of a joystick.
SDL_GUID SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);                                                                                    // Get the implementation-dependent GUID of a joystick.
Uint16 SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);                                                                                    // Get the USB vendor ID of a joystick, if available.
Uint16 SDL_GetJoystickProductForID(SDL_JoystickID instance_id);                                                                                   // Get the USB product ID of a joystick, if available.
Uint16 SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);                                                                            // Get the product version of a joystick, if available.
SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);                                                                            // Get the type of a joystick, if available.
SDL_Joystick * SDL_OpenJoystick(SDL_JoystickID instance_id);                                                                                      // Open a joystick for use.
SDL_Joystick * SDL_GetJoystickFromID(SDL_JoystickID instance_id);                                                                                 // Get the SDL_Joystick associated with an instance ID, if it has been opened.
SDL_Joystick * SDL_GetJoystickFromPlayerIndex(int player_index);                                                                                  // Get the SDL_Joystick associated with a player index.
SDL_JoystickID SDL_AttachVirtualJoystick(const SDL_VirtualJoystickDesc *desc);                                                                    // Attach a new virtual joystick.
bool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);                                                                                       // Detach a virtual joystick.
bool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);                                                                                           // Query whether or not a joystick is virtual.
bool SDL_SetJoystickVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);                                                                  // Set the state of an axis on an opened virtual joystick.
bool SDL_SetJoystickVirtualBall(SDL_Joystick *joystick, int ball, Sint16 xrel, Sint16 yrel);                                                      // Generate ball motion on an opened virtual joystick.
bool SDL_SetJoystickVirtualButton(SDL_Joystick *joystick, int button, bool down);                                                                 // Set the state of a button on an opened virtual joystick.
bool SDL_SetJoystickVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);                                                                     // Set the state of a hat on an opened virtual joystick.
bool SDL_SetJoystickVirtualTouchpad(SDL_Joystick *joystick, int touchpad, int finger, bool down, float x, float y, float pressure);               // Set touchpad finger state on an opened virtual joystick.
bool SDL_SendJoystickVirtualSensorData(SDL_Joystick *joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float *data, int num_values);  // Send a sensor update for an opened virtual joystick.
SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick *joystick);                                                                               // Get the properties associated with a joystick.
const char * SDL_GetJoystickName(SDL_Joystick *joystick);                                                                                         // Get the implementation dependent name of a joystick.
const char * SDL_GetJoystickPath(SDL_Joystick *joystick);                                                                                         // Get the implementation dependent path of a joystick.
int SDL_GetJoystickPlayerIndex(SDL_Joystick *joystick);                                                                                           // Get the player index of an opened joystick.
bool SDL_SetJoystickPlayerIndex(SDL_Joystick *joystick, int player_index);                                                                        // Set the player index of an opened joystick.
SDL_GUID SDL_GetJoystickGUID(SDL_Joystick *joystick);                                                                                             // Get the implementation-dependent GUID for the joystick.
Uint16 SDL_GetJoystickVendor(SDL_Joystick *joystick);                                                                                             // Get the USB vendor ID of an opened joystick, if available.
Uint16 SDL_GetJoystickProduct(SDL_Joystick *joystick);                                                                                            // Get the USB product ID of an opened joystick, if available.
Uint16 SDL_GetJoystickProductVersion(SDL_Joystick *joystick);                                                                                     // Get the product version of an opened joystick, if available.
Uint16 SDL_GetJoystickFirmwareVersion(SDL_Joystick *joystick);                                                                                    // Get the firmware version of an opened joystick, if available.
const char * SDL_GetJoystickSerial(SDL_Joystick *joystick);                                                                                       // Get the serial number of an opened joystick, if available.
SDL_JoystickType SDL_GetJoystickType(SDL_Joystick *joystick);                                                                                     // Get the type of an opened joystick.
void SDL_GetJoystickGUIDInfo(SDL_GUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);                                     // Get the device information encoded in a SDL_GUID structure.
bool SDL_JoystickConnected(SDL_Joystick *joystick);                                                                                               // Get the status of a specified joystick.
SDL_JoystickID SDL_GetJoystickID(SDL_Joystick *joystick);                                                                                         // Get the instance ID of an opened joystick.
int SDL_GetNumJoystickAxes(SDL_Joystick *joystick);                                                                                               // Get the number of general axis controls on a joystick.
int SDL_GetNumJoystickBalls(SDL_Joystick *joystick);                                                                                              // Get the number of trackballs on a joystick.
int SDL_GetNumJoystickHats(SDL_Joystick *joystick);                                                                                               // Get the number of POV hats on a joystick.
int SDL_GetNumJoystickButtons(SDL_Joystick *joystick);                                                                                            // Get the number of buttons on a joystick.
void SDL_SetJoystickEventsEnabled(bool enabled);                                                                                                  // Set the state of joystick event processing.
bool SDL_JoystickEventsEnabled(void);                                                                                                             // Query the state of joystick event processing.
void SDL_UpdateJoysticks(void);                                                                                                                   // Update the current state of the open joysticks.
Sint16 SDL_GetJoystickAxis(SDL_Joystick *joystick, int axis);                                                                                     // Get the current state of an axis control on a joystick.
bool SDL_GetJoystickAxisInitialState(SDL_Joystick *joystick, int axis, Sint16 *state);                                                            // Get the initial state of an axis control on a joystick.
bool SDL_GetJoystickBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);                                                                     // Get the ball axis change since the last poll.
Uint8 SDL_GetJoystickHat(SDL_Joystick *joystick, int hat);                                                                                        // Get the current state of a POV hat on a joystick.
bool SDL_GetJoystickButton(SDL_Joystick *joystick, int button);                                                                                   // Get the current state of a button on a joystick.
bool SDL_RumbleJoystick(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);                   // Start a rumble effect.
bool SDL_RumbleJoystickTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);                             // Start a rumble effect in the joystick's triggers.
bool SDL_SetJoystickLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);                                                              // Update a joystick's LED color.
bool SDL_SendJoystickEffect(SDL_Joystick *joystick, const void *data, int size);                                                                  // Send a joystick specific effect packet.
void SDL_CloseJoystick(SDL_Joystick *joystick);                                                                                                   // Close a joystick previously opened with SDL_OpenJoystick().
SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick *joystick);                                                               // Get the connection state of a joystick.
SDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick *joystick, int *percent);   


bool SDL_HasKeyboard(void);                                                                      // Return whether a keyboard is currently connected.
SDL_KeyboardID * SDL_GetKeyboards(int *count);                                                   // Get a list of currently connected keyboards.
const char * SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);                               // Get the name of a keyboard.
SDL_Window * SDL_GetKeyboardFocus(void);                                                         // Query the window which currently has keyboard focus.
const bool * SDL_GetKeyboardState(int *numkeys);                                                 // Get a snapshot of the current state of the keyboard.
void SDL_ResetKeyboard(void);                                                                    // Clear the state of the keyboard.
SDL_Keymod SDL_GetModState(void);                                                                // Get the current key modifier state for the keyboard.
void SDL_SetModState(SDL_Keymod modstate);                                                       // Set the current key modifier state for the keyboard.
SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, bool key_event);  // Get the key code corresponding to the given scancode according to the current keyboard layout.
SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod *modstate);                      // Get the scancode corresponding to the given key code according to the current keyboard layout.
bool SDL_SetScancodeName(SDL_Scancode scancode, const char *name);                               // Set a human-readable name for a scancode.
const char * SDL_GetScancodeName(SDL_Scancode scancode);                                         // Get a human-readable name for a scancode.
SDL_Scancode SDL_GetScancodeFromName(const char *name);                                          // Get a scancode from a human-readable name.
const char * SDL_GetKeyName(SDL_Keycode key);                                                    // Get a human-readable name for a key.
SDL_Keycode SDL_GetKeyFromName(const char *name);                                                // Get a key code from a human-readable name.
bool SDL_StartTextInput(SDL_Window *window);                                                     // Start accepting Unicode text input events in a window.
bool SDL_StartTextInputWithProperties(SDL_Window *window, SDL_PropertiesID props);               // Start accepting Unicode text input events in a window, with properties describing the input.
bool SDL_TextInputActive(SDL_Window *window);                                                    // Check whether or not Unicode text input events are enabled for a window.
bool SDL_StopTextInput(SDL_Window *window);                                                      // Stop receiving any text input events in a window.
bool SDL_ClearComposition(SDL_Window *window);                                                   // Dismiss the composition window/IME without disabling the subsystem.
bool SDL_SetTextInputArea(SDL_Window *window, const SDL_Rect *rect, int cursor);                 // Set the area used to type Unicode text input.
bool SDL_GetTextInputArea(SDL_Window *window, SDL_Rect *rect, int *cursor);                      // Get the area used to type Unicode text input.
bool SDL_HasScreenKeyboardSupport(void);                                                         // Check whether the platform has screen keyboard support.
bool SDL_ScreenKeyboardShown(SDL_Window *window);                                                // Check whether the screen keyboard is shown for given window.
