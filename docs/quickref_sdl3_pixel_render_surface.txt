SDL_Surface * SDL_CreateSurface(int width, int height, SDL_PixelFormat format);                                                                                                                                                                                                                                // Allocate a new surface with a specific pixel format.
SDL_Surface * SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void *pixels, int pitch);                                                                                                                                                                                                   // Allocate a new surface with a specific pixel format and existing pixel data.
void SDL_DestroySurface(SDL_Surface *surface);                                                                                                                                                                                                                                                                 // Free a surface.
SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface *surface);                                                                                                                                                                                                                                               // Get the properties associated with a surface.
bool SDL_SetSurfaceColorspace(SDL_Surface *surface, SDL_Colorspace colorspace);                                                                                                                                                                                                                                // Set the colorspace used by a surface.
SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface *surface);                                                                                                                                                                                                                                                 // Get the colorspace used by a surface.
SDL_Palette * SDL_CreateSurfacePalette(SDL_Surface *surface);                                                                                                                                                                                                                                                  // Create a palette and associate it with a surface.
bool SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);                                                                                                                                                                                                                                        // Set the palette used by a surface.
SDL_Palette * SDL_GetSurfacePalette(SDL_Surface *surface);                                                                                                                                                                                                                                                     // Get the palette used by a surface.
bool SDL_AddSurfaceAlternateImage(SDL_Surface *surface, SDL_Surface *image);                                                                                                                                                                                                                                   // Add an alternate version of a surface.
bool SDL_SurfaceHasAlternateImages(SDL_Surface *surface);                                                                                                                                                                                                                                                      // Return whether a surface has alternate versions available.
SDL_Surface ** SDL_GetSurfaceImages(SDL_Surface *surface, int *count);                                                                                                                                                                                                                                         // Get an array including all versions of a surface.
void SDL_RemoveSurfaceAlternateImages(SDL_Surface *surface);                                                                                                                                                                                                                                                   // Remove all alternate versions of a surface.
bool SDL_LockSurface(SDL_Surface *surface);                                                                                                                                                                                                                                                                    // Set up a surface for directly accessing the pixels.
void SDL_UnlockSurface(SDL_Surface *surface);                                                                                                                                                                                                                                                                  // Release a surface after directly accessing the pixels.
SDL_Surface * SDL_LoadBMP_IO(SDL_IOStream *src, bool closeio);                                                                                                                                                                                                                                                 // Load a BMP image from a seekable SDL data stream.
SDL_Surface * SDL_LoadBMP(const char *file);                                                                                                                                                                                                                                                                   // Load a BMP image from a file.
bool SDL_SaveBMP_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);                                                                                                                                                                                                                                    // Save a surface to a seekable SDL data stream in BMP format.
bool SDL_SaveBMP(SDL_Surface *surface, const char *file);                                                                                                                                                                                                                                                      // Save a surface to a file.
bool SDL_SetSurfaceRLE(SDL_Surface *surface, bool enabled);                                                                                                                                                                                                                                                    // Set the RLE acceleration hint for a surface.
bool SDL_SurfaceHasRLE(SDL_Surface *surface);                                                                                                                                                                                                                                                                  // Returns whether the surface is RLE enabled.
bool SDL_SetSurfaceColorKey(SDL_Surface *surface, bool enabled, Uint32 key);                                                                                                                                                                                                                                   // Set the color key (transparent pixel) in a surface.
bool SDL_SurfaceHasColorKey(SDL_Surface *surface);                                                                                                                                                                                                                                                             // Returns whether the surface has a color key.
bool SDL_GetSurfaceColorKey(SDL_Surface *surface, Uint32 *key);                                                                                                                                                                                                                                                // Get the color key (transparent pixel) for a surface.
bool SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);                                                                                                                                                                                                                                  // Set an additional color value multiplied into blit operations.
bool SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);                                                                                                                                                                                                                               // Get the additional color value multiplied into blit operations.
bool SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);                                                                                                                                                                                                                                                // Set an additional alpha value used in blit operations.
bool SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);                                                                                                                                                                                                                                               // Get the additional alpha value used in blit operations.
bool SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);                                                                                                                                                                                                                                   // Set the blend mode used for blit operations.
bool SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);                                                                                                                                                                                                                                  // Get the blend mode used for blit operations.
bool SDL_SetSurfaceClipRect(SDL_Surface *surface, const SDL_Rect *rect);                                                                                                                                                                                                                                       // Set the clipping rectangle for a surface.
bool SDL_GetSurfaceClipRect(SDL_Surface *surface, SDL_Rect *rect);                                                                                                                                                                                                                                             // Get the clipping rectangle for a surface.
bool SDL_FlipSurface(SDL_Surface *surface, SDL_FlipMode flip);                                                                                                                                                                                                                                                 // Flip a surface vertically or horizontally.
SDL_Surface * SDL_DuplicateSurface(SDL_Surface *surface);                                                                                                                                                                                                                                                      // Creates a new surface identical to the existing surface.
SDL_Surface * SDL_ScaleSurface(SDL_Surface *surface, int width, int height, SDL_ScaleMode scaleMode);                                                                                                                                                                                                          // Creates a new surface identical to the existing surface, scaled to the desired size.
SDL_Surface * SDL_ConvertSurface(SDL_Surface *surface, SDL_PixelFormat format);                                                                                                                                                                                                                                // Copy an existing surface to a new surface of the specified format.
SDL_Surface * SDL_ConvertSurfaceAndColorspace(SDL_Surface *surface, SDL_PixelFormat format, SDL_Palette *palette, SDL_Colorspace colorspace, SDL_PropertiesID props);                                                                                                                                          // Copy an existing surface to a new surface of the specified format and colorspace.
bool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch);                                                                                                                                               // Copy a block of pixels of one format to another format.
bool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void *src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void *dst, int dst_pitch);  // Copy a block of pixels of one format and colorspace to another format and colorspace.
bool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch, bool linear);                                                                                                                               // Premultiply the alpha on a block of pixels.
bool SDL_PremultiplySurfaceAlpha(SDL_Surface *surface, bool linear);                                                                                                                                                                                                                                           // Premultiply the alpha in a surface.
bool SDL_ClearSurface(SDL_Surface *surface, float r, float g, float b, float a);                                                                                                                                                                                                                               // Clear a surface with a specific color, with floating point precision.
bool SDL_FillSurfaceRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);                                                                                                                                                                                                                                // Perform a fast fill of a rectangle with a specific color.
bool SDL_FillSurfaceRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);                                                                                                                                                                                                                   // Perform a fast fill of a set of rectangles with a specific color.
bool SDL_BlitSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);                                                                                                                                                                                                    // Performs a fast blit from the source surface to the destination surface with clipping.
bool SDL_BlitSurfaceUnchecked(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);                                                                                                                                                                                           // Perform low-level surface blitting only.
bool SDL_BlitSurfaceScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);                                                                                                                                                                     // Perform a scaled blit to a destination surface, which may be of a different format.
bool SDL_BlitSurfaceUncheckedScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);                                                                                                                                                            // Perform low-level surface scaled blitting only.
bool SDL_StretchSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);                                                                                                                                                                        // Perform a stretched pixel copy from one surface to another.
bool SDL_BlitSurfaceTiled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);                                                                                                                                                                                               // Perform a tiled blit to a destination surface, which may be of a different format.
bool SDL_BlitSurfaceTiledWithScale(SDL_Surface *src, const SDL_Rect *srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);                                                                                                                                                // Perform a scaled and tiled blit to a destination surface, which may be of a different format.
bool SDL_BlitSurface9Grid(SDL_Surface *src, const SDL_Rect *srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);                                                                                     // Perform a scaled blit using the 9-grid algorithm to a destination surface, which may be of a different format.
Uint32 SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);                                                                                                                                                                                                                                     // Map an RGB triple to an opaque pixel value for a surface.
Uint32 SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);                                                                                                                                                                                                                           // Map an RGBA quadruple to a pixel value for a surface.
bool SDL_ReadSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);                                                                                                                                                                                                         // Retrieves a single pixel from a surface.
bool SDL_ReadSurfacePixelFloat(SDL_Surface *surface, int x, int y, float *r, float *g, float *b, float *a);                                                                                                                                                                                                    // Retrieves a single pixel from a surface.
bool SDL_WriteSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);                                                                                                                                                                                                            // Writes a single pixel to a surface.
bool SDL_WriteSurfacePixelFloat(SDL_Surface *surface, int x, int y, float r, float g, float b, float a);                                                                                                                                                                                                       // Writes a single pixel to a surface.

const char * SDL_GetPixelFormatName(SDL_PixelFormat format);                                                                                    // Get the human readable name of a pixel format.
bool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int *bpp, Uint32 *Rmask, Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);                  // Convert one of the enumerated pixel formats to a bpp value and RGBA masks.
SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);                                    // Convert a bpp value and RGBA masks to an enumerated pixel format.
const SDL_PixelFormatDetails * SDL_GetPixelFormatDetails(SDL_PixelFormat format);                                                               // Create an SDL_PixelFormatDetails structure corresponding to a pixel format.
SDL_Palette * SDL_CreatePalette(int ncolors);                                                                                                   // Create a palette structure with the specified number of color entries.
bool SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);                                          // Set a range of colors in a palette.
void SDL_DestroyPalette(SDL_Palette *palette);                                                                                                  // Free a palette created with SDL_CreatePalette().
Uint32 SDL_MapRGB(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b);                                 // Map an RGB triple to an opaque pixel value for a given pixel format.
Uint32 SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);                       // Map an RGBA quadruple to a pixel value for a given pixel format.
void SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);             // Get RGB values from a pixel in the specified format.
void SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);  // Get RGBA values from a pixel in the specified format.

int SDL_GetNumRenderDrivers(void);                                                                                                                                                                                                                              // Get the number of 2D rendering drivers available for the current display.
const char * SDL_GetRenderDriver(int index);                                                                                                                                                                                                                    // Use this function to get the name of a built in 2D rendering driver.
bool SDL_CreateWindowAndRenderer(const char *title, int width, int height, SDL_WindowFlags window_flags, SDL_Window **window, SDL_Renderer **renderer);                                                                                                         // Create a window and default renderer.
SDL_Renderer * SDL_CreateRenderer(SDL_Window *window, const char *name);                                                                                                                                                                                        // Create a 2D rendering context for a window.
SDL_Renderer * SDL_CreateRendererWithProperties(SDL_PropertiesID props);                                                                                                                                                                                        // Create a 2D rendering context for a window, with the specified properties.
SDL_Renderer * SDL_CreateGPURenderer(SDL_Window *window, SDL_GPUShaderFormat format_flags, SDL_GPUDevice **device);                                                                                                                                             // Create a 2D GPU rendering context for a window, with support for the specified shader format.
SDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface *surface);                                                                                                                                                                                                // Create a 2D software rendering context for a surface.
SDL_Renderer * SDL_GetRenderer(SDL_Window *window);                                                                                                                                                                                                             // Get the renderer associated with a window.
SDL_Window * SDL_GetRenderWindow(SDL_Renderer *renderer);                                                                                                                                                                                                       // Get the window associated with a renderer.
const char * SDL_GetRendererName(SDL_Renderer *renderer);                                                                                                                                                                                                       // Get the name of a renderer.
SDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer *renderer);                                                                                                                                                                                             // Get the properties associated with a renderer.
bool SDL_GetRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);                                                                                                                                                                                           // Get the output size in pixels of a rendering context.
bool SDL_GetCurrentRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);                                                                                                                                                                                    // Get the current output size in pixels of a rendering context.
SDL_Texture * SDL_CreateTexture(SDL_Renderer *renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);                                                                                                                                        // Create a texture for a rendering context.
SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);                                                                                                                                                                       // Create a texture from an existing surface.
SDL_Texture * SDL_CreateTextureWithProperties(SDL_Renderer *renderer, SDL_PropertiesID props);                                                                                                                                                                  // Create a texture for a rendering context with the specified properties.
SDL_PropertiesID SDL_GetTextureProperties(SDL_Texture *texture);                                                                                                                                                                                                // Get the properties associated with a texture.
SDL_Renderer * SDL_GetRendererFromTexture(SDL_Texture *texture);                                                                                                                                                                                                // Get the renderer that created an SDL_Texture.
bool SDL_GetTextureSize(SDL_Texture *texture, float *w, float *h);                                                                                                                                                                                              // Get the size of a texture, as floating point values.
bool SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);                                                                                                                                                                                   // Set an additional color value multiplied into render copy operations.
bool SDL_SetTextureColorModFloat(SDL_Texture *texture, float r, float g, float b);                                                                                                                                                                              // Set an additional color value multiplied into render copy operations.
bool SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);                                                                                                                                                                                // Get the additional color value multiplied into render copy operations.
bool SDL_GetTextureColorModFloat(SDL_Texture *texture, float *r, float *g, float *b);                                                                                                                                                                           // Get the additional color value multiplied into render copy operations.
bool SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);                                                                                                                                                                                                 // Set an additional alpha value multiplied into render copy operations.
bool SDL_SetTextureAlphaModFloat(SDL_Texture *texture, float alpha);                                                                                                                                                                                            // Set an additional alpha value multiplied into render copy operations.
bool SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);                                                                                                                                                                                                // Get the additional alpha value multiplied into render copy operations.
bool SDL_GetTextureAlphaModFloat(SDL_Texture *texture, float *alpha);                                                                                                                                                                                           // Get the additional alpha value multiplied into render copy operations.
bool SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);                                                                                                                                                                                    // Set the blend mode for a texture, used by SDL_RenderTexture().
bool SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);                                                                                                                                                                                   // Get the blend mode used for texture copy operations.
bool SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);                                                                                                                                                                                    // Set the scale mode used for texture scale operations.
bool SDL_GetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode *scaleMode);                                                                                                                                                                                   // Get the scale mode used for texture scale operations.
bool SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);                                                                                                                                                              // Update the given texture rectangle with new pixel data.
bool SDL_UpdateYUVTexture(SDL_Texture *texture, const SDL_Rect *rect, const Uint8 *Yplane, int Ypitch, const Uint8 *Uplane, int Upitch, const Uint8 *Vplane, int Vpitch);                                                                                       // Update a rectangle within a planar YV12 or IYUV texture with new pixel data.
bool SDL_UpdateNVTexture(SDL_Texture *texture, const SDL_Rect *rect, const Uint8 *Yplane, int Ypitch, const Uint8 *UVplane, int UVpitch);                                                                                                                       // Update a rectangle within a planar NV12 or NV21 texture with new pixels.
bool SDL_LockTexture(SDL_Texture *texture, const SDL_Rect *rect, void **pixels, int *pitch);                                                                                                                                                                    // Lock a portion of the texture for **write-only** pixel access.
bool SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface);                                                                                                                                                               // Lock a portion of the texture for **write-only** pixel access, and expose it as a SDL surface.
void SDL_UnlockTexture(SDL_Texture *texture);                                                                                                                                                                                                                   // Unlock a texture, uploading the changes to video memory, if needed.
bool SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);                                                                                                                                                                                         // Set a texture as the current rendering target.
SDL_Texture * SDL_GetRenderTarget(SDL_Renderer *renderer);                                                                                                                                                                                                      // Get the current render target.
bool SDL_SetRenderLogicalPresentation(SDL_Renderer *renderer, int w, int h, SDL_RendererLogicalPresentation mode);                                                                                                                                              // Set a device-independent resolution and presentation mode for rendering.
bool SDL_GetRenderLogicalPresentation(SDL_Renderer *renderer, int *w, int *h, SDL_RendererLogicalPresentation *mode);                                                                                                                                           // Get device independent resolution and presentation mode for rendering.
bool SDL_GetRenderLogicalPresentationRect(SDL_Renderer *renderer, SDL_FRect *rect);                                                                                                                                                                             // Get the final presentation rectangle for rendering.
bool SDL_RenderCoordinatesFromWindow(SDL_Renderer *renderer, float window_x, float window_y, float *x, float *y);                                                                                                                                               // Get a point in render coordinates when given a point in window coordinates.
bool SDL_RenderCoordinatesToWindow(SDL_Renderer *renderer, float x, float y, float *window_x, float *window_y);                                                                                                                                                 // Get a point in window coordinates when given a point in render coordinates.
bool SDL_ConvertEventToRenderCoordinates(SDL_Renderer *renderer, SDL_Event *event);                                                                                                                                                                             // Convert the coordinates in an event to render coordinates.
bool SDL_SetRenderViewport(SDL_Renderer *renderer, const SDL_Rect *rect);                                                                                                                                                                                       // Set the drawing area for rendering on the current target.
bool SDL_GetRenderViewport(SDL_Renderer *renderer, SDL_Rect *rect);                                                                                                                                                                                             // Get the drawing area for the current target.
bool SDL_RenderViewportSet(SDL_Renderer *renderer);                                                                                                                                                                                                             // Return whether an explicit rectangle was set as the viewport.
bool SDL_GetRenderSafeArea(SDL_Renderer *renderer, SDL_Rect *rect);                                                                                                                                                                                             // Get the safe area for rendering within the current viewport.
bool SDL_SetRenderClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);                                                                                                                                                                                       // Set the clip rectangle for rendering on the specified target.
bool SDL_GetRenderClipRect(SDL_Renderer *renderer, SDL_Rect *rect);                                                                                                                                                                                             // Get the clip rectangle for the current target.
bool SDL_RenderClipEnabled(SDL_Renderer *renderer);                                                                                                                                                                                                             // Get whether clipping is enabled on the given render target.
bool SDL_SetRenderScale(SDL_Renderer *renderer, float scaleX, float scaleY);                                                                                                                                                                                    // Set the drawing scale for rendering on the current target.
bool SDL_GetRenderScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);                                                                                                                                                                                  // Get the drawing scale for the current target.
bool SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);                                                                                                                                                                        // Set the color used for drawing operations.
bool SDL_SetRenderDrawColorFloat(SDL_Renderer *renderer, float r, float g, float b, float a);                                                                                                                                                                   // Set the color used for drawing operations (Rect, Line and Clear).
bool SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);                                                                                                                                                                    // Get the color used for drawing operations (Rect, Line and Clear).
bool SDL_GetRenderDrawColorFloat(SDL_Renderer *renderer, float *r, float *g, float *b, float *a);                                                                                                                                                               // Get the color used for drawing operations (Rect, Line and Clear).
bool SDL_SetRenderColorScale(SDL_Renderer *renderer, float scale);                                                                                                                                                                                              // Set the color scale used for render operations.
bool SDL_GetRenderColorScale(SDL_Renderer *renderer, float *scale);                                                                                                                                                                                             // Get the color scale used for render operations.
bool SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);                                                                                                                                                                               // Set the blend mode used for drawing operations (Fill and Line).
bool SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);                                                                                                                                                                              // Get the blend mode used for drawing operations.
bool SDL_RenderClear(SDL_Renderer *renderer);                                                                                                                                                                                                                   // Clear the current rendering target with the drawing color.
bool SDL_RenderPoint(SDL_Renderer *renderer, float x, float y);                                                                                                                                                                                                 // Draw a point on the current rendering target at subpixel precision.
bool SDL_RenderPoints(SDL_Renderer *renderer, const SDL_FPoint *points, int count);                                                                                                                                                                             // Draw multiple points on the current rendering target at subpixel precision.
bool SDL_RenderLine(SDL_Renderer *renderer, float x1, float y1, float x2, float y2);                                                                                                                                                                            // Draw a line on the current rendering target at subpixel precision.
bool SDL_RenderLines(SDL_Renderer *renderer, const SDL_FPoint *points, int count);                                                                                                                                                                              // Draw a series of connected lines on the current rendering target at subpixel precision.
bool SDL_RenderRect(SDL_Renderer *renderer, const SDL_FRect *rect);                                                                                                                                                                                             // Draw a rectangle on the current rendering target at subpixel precision.
bool SDL_RenderRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);                                                                                                                                                                                // Draw some number of rectangles on the current rendering target at subpixel precision.
bool SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_FRect *rect);                                                                                                                                                                                         // Fill a rectangle on the current rendering target with the drawing color at subpixel precision.
bool SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);                                                                                                                                                                            // Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision.
bool SDL_RenderTexture(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect);                                                                                                                                       // Copy a portion of the texture to the current rendering target at subpixel precision.
bool SDL_RenderTextureRotated(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect, double angle, const SDL_FPoint *center, SDL_FlipMode flip);                                                                     // Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision.
bool SDL_RenderTextureAffine(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FPoint *origin, const SDL_FPoint *right, const SDL_FPoint *down);                                                                                // Copy a portion of the source texture to the current rendering target, with affine transform, at subpixel precision.
bool SDL_RenderTextureTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float scale, const SDL_FRect *dstrect);                                                                                                                     // Tile a portion of the texture to the current rendering target at subpixel precision.
bool SDL_RenderTexture9Grid(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect);                                         // Perform a scaled copy using the 9-grid algorithm to the current rendering target at subpixel precision.
bool SDL_RenderTexture9GridTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect, float tileScale);                   // Perform a scaled copy using the 9-grid algorithm to the current rendering target at subpixel precision.
bool SDL_RenderGeometry(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Vertex *vertices, int num_vertices, const int *indices, int num_indices);                                                                                                       // Render a list of triangles, optionally using a texture and indices into the vertex array Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
bool SDL_RenderGeometryRaw(SDL_Renderer *renderer, SDL_Texture *texture, const float *xy, int xy_stride, const SDL_FColor *color, int color_stride, const float *uv, int uv_stride, int num_vertices, const void *indices, int num_indices, int size_indices);  // Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
bool SDL_SetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode u_mode, SDL_TextureAddressMode v_mode);                                                                                                                                     // Set the texture addressing mode used in SDL_RenderGeometry().
bool SDL_GetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode *u_mode, SDL_TextureAddressMode *v_mode);                                                                                                                                   // Get the texture addressing mode used in SDL_RenderGeometry().
SDL_Surface * SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect);                                                                                                                                                                               // Read pixels from the current rendering target.
bool SDL_RenderPresent(SDL_Renderer *renderer);                                                                                                                                                                                                                 // Update the screen with any rendering performed since the previous call.
void SDL_DestroyTexture(SDL_Texture *texture);                                                                                                                                                                                                                  // Destroy the specified texture.
void SDL_DestroyRenderer(SDL_Renderer *renderer);                                                                                                                                                                                                               // Destroy the rendering context for a window and free all associated textures.
bool SDL_FlushRenderer(SDL_Renderer *renderer);                                                                                                                                                                                                                 // Force the rendering context to flush any pending commands and state.
void * SDL_GetRenderMetalLayer(SDL_Renderer *renderer);                                                                                                                                                                                                         // Get the CAMetalLayer associated with the given Metal renderer.
void * SDL_GetRenderMetalCommandEncoder(SDL_Renderer *renderer);                                                                                                                                                                                                // Get the Metal command encoder for the current frame.
bool SDL_AddVulkanRenderSemaphores(SDL_Renderer *renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore);                                                                                                                             // Add a set of synchronization semaphores for the current frame.
bool SDL_SetRenderVSync(SDL_Renderer *renderer, int vsync);                                                                                                                                                                                                     // Toggle VSync of the given renderer.
bool SDL_GetRenderVSync(SDL_Renderer *renderer, int *vsync);                                                                                                                                                                                                    // Get VSync of the given renderer.
bool SDL_RenderDebugText(SDL_Renderer *renderer, float x, float y, const char *str);                                                                                                                                                                            // Draw debug text to an SDL_Renderer.
bool SDL_RenderDebugTextFormat(SDL_Renderer *renderer, float x, float y, const char *fmt, ... ...);                                                                                                                                                             // Draw debug text to an SDL_Renderer.
bool SDL_SetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode scale_mode);                                                                                                                                                                          // Set default scale mode for new textures for given renderer.
bool SDL_GetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode *scale_mode);                                                                                                                                                                         // Get default texture scale mode of the given renderer.
SDL_GPURenderState * SDL_CreateGPURenderState(SDL_Renderer *renderer, SDL_GPURenderStateDesc *desc);                                                                                                                                                            // Create custom GPU render state.
bool SDL_SetGPURenderStateFragmentUniforms(SDL_GPURenderState *state, Uint32 slot_index, const void *data, Uint32 length);                                                                                                                                      // Set fragment shader uniform variables in a custom GPU render state.
bool SDL_SetRenderGPUState(SDL_Renderer *renderer, SDL_GPURenderState *state);                                                                                                                                                                                  // Set custom GPU render state.
void SDL_DestroyGPURenderState(SDL_GPURenderState *state);                                                                                                                                                                                                      // Destroy custom GPU render state.
