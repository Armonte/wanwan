#define SDL_COMPILE_TIME_ASSERT(name, x)                                                                                                                    // A compile-time assertion.
#define SDL_arraysize(array)                                                                                                                                // The number of elements in a static array.
#define SDL_reinterpret_cast(type, expression)                                                                                                              // Handle a Reinterpret Cast properly whether using C or C++.
#define SDL_static_cast(type, expression)                                                                                                                   // Handle a Static Cast properly whether using C or C++.
#define SDL_const_cast(type, expression)                                                                                                                    // Handle a Const Cast properly whether using C or C++.
void * SDL_malloc(size_t size);                                                                                                                             // Allocate uninitialized memory.
void * SDL_calloc(size_t nmemb, size_t size);                                                                                                               // Allocate a zero-initialized array.
void * SDL_realloc(void *mem, size_t size);                                                                                                                 // Change the size of allocated memory.
void SDL_free(void *mem);                                                                                                                                   // Free allocated memory.
void SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func, SDL_calloc_func *calloc_func, SDL_realloc_func *realloc_func, SDL_free_func *free_func);  // Get the original set of SDL memory functions.
void SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func, SDL_calloc_func *calloc_func, SDL_realloc_func *realloc_func, SDL_free_func *free_func);          // Get the current set of SDL memory functions.
bool SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func);              // Replace SDL's memory allocation functions with a custom set.
void * SDL_aligned_alloc(size_t alignment, size_t size);                                                                                                    // Allocate memory aligned to a specific alignment.
void SDL_aligned_free(void *mem);                                                                                                                           // Free memory allocated by SDL_aligned_alloc().
int SDL_GetNumAllocations(void);                                                                                                                            // Get the number of outstanding (unfreed) allocations.
SDL_Environment * SDL_GetEnvironment(void);                                                                                                                 // Get the process environment.
SDL_Environment * SDL_CreateEnvironment(bool populated);                                                                                                    // Create a set of environment variables
const char * SDL_GetEnvironmentVariable(SDL_Environment *env, const char *name);                                                                            // Get the value of a variable in the environment.
char ** SDL_GetEnvironmentVariables(SDL_Environment *env);                                                                                                  // Get all variables in the environment.
bool SDL_SetEnvironmentVariable(SDL_Environment *env, const char *name, const char *value, bool overwrite);                                                 // Set the value of a variable in the environment.
bool SDL_UnsetEnvironmentVariable(SDL_Environment *env, const char *name);                                                                                  // Clear a variable from the environment.
void SDL_DestroyEnvironment(SDL_Environment *env);                                                                                                          // Destroy a set of environment variables.
const char * SDL_getenv(const char *name);                                                                                                                  // Get the value of a variable in the environment.
const char * SDL_getenv_unsafe(const char *name);                                                                                                           // Get the value of a variable in the environment.
int SDL_setenv_unsafe(const char *name, const char *value, int overwrite);                                                                                  // Set the value of a variable in the environment.
int SDL_unsetenv_unsafe(const char *name);                                                                                                                  // Clear a variable from the environment.
void SDL_qsort(void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);                                                                         // Sort an array.
void * SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);                                              // Perform a binary search on a previously sorted array.
void SDL_qsort_r(void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);                                                     // Sort an array, passing a userdata pointer to the compare function.
void * SDL_bsearch_r(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);                          // Perform a binary search on a previously sorted array, passing a userdata pointer to the compare function.
int SDL_abs(int x);                                                                                                                                         // Compute the absolute value of `x`.
int SDL_isalpha(int x);                                                                                                                                     // Query if a character is alphabetic (a letter).
int SDL_isalnum(int x);                                                                                                                                     // Query if a character is alphabetic (a letter) or a number.
int SDL_isblank(int x);                                                                                                                                     // Report if a character is blank (a space or tab).
int SDL_iscntrl(int x);                                                                                                                                     // Report if a character is a control character.
int SDL_isdigit(int x);                                                                                                                                     // Report if a character is a numeric digit.
int SDL_isxdigit(int x);                                                                                                                                    // Report if a character is a hexadecimal digit.
int SDL_ispunct(int x);                                                                                                                                     // Report if a character is a punctuation mark.
int SDL_isspace(int x);                                                                                                                                     // Report if a character is whitespace.
int SDL_isupper(int x);                                                                                                                                     // Report if a character is upper case.
int SDL_islower(int x);                                                                                                                                     // Report if a character is lower case.
int SDL_isprint(int x);                                                                                                                                     // Report if a character is "printable".
int SDL_isgraph(int x);                                                                                                                                     // Report if a character is any "printable" except space.
int SDL_toupper(int x);                                                                                                                                     // Convert low-ASCII English letters to uppercase.
int SDL_tolower(int x);                                                                                                                                     // Convert low-ASCII English letters to lowercase.
Uint16 SDL_crc16(Uint16 crc, const void *data, size_t len);                                                                                                 // Calculate a CRC-16 value.
Uint32 SDL_crc32(Uint32 crc, const void *data, size_t len);                                                                                                 // Calculate a CRC-32 value.
Uint32 SDL_murmur3_32(const void *data, size_t len, Uint32 seed);                                                                                           // Calculate a 32-bit MurmurHash3 value for a block of data.
void * SDL_memcpy(void *dst, const void *src, size_t len);                                                                                                  // Copy non-overlapping memory.
void * SDL_memmove(void *dst, const void *src, size_t len);                                                                                                 // Copy memory ranges that might overlap.
void * SDL_memset(void *dst, int c, size_t len);                                                                                                            // Initialize all bytes of buffer of memory to a specific value.
void * SDL_memset4(void *dst, Uint32 val, size_t dwords);                                                                                                   // Initialize all 32-bit words of buffer of memory to a specific value.
int SDL_memcmp(const void *s1, const void *s2, size_t len);                                                                                                 // Compare two buffers of memory.
size_t SDL_wcslen(const wchar_t *wstr);                                                                                                                     // This works exactly like wcslen() but doesn't require access to a C runtime.
size_t SDL_wcsnlen(const wchar_t *wstr, size_t maxlen);                                                                                                     // This works exactly like wcsnlen() but doesn't require access to a C runtime.
size_t SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);                                                                                        // Copy a wide string.
size_t SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);                                                                                        // Concatenate wide strings.
wchar_t * SDL_wcsdup(const wchar_t *wstr);                                                                                                                  // Allocate a copy of a wide string.
wchar_t * SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);                                                                                       // Search a wide string for the first instance of a specific substring.
wchar_t * SDL_wcsnstr(const wchar_t *haystack, const wchar_t *needle, size_t maxlen);                                                                       // Search a wide string, up to n wide chars, for the first instance of a specific substring.
int SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);                                                                                                   // Compare two null-terminated wide strings.
int SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);                                                                                   // Compare two wide strings up to a number of wchar_t values.
int SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);                                                                                               // Compare two null-terminated wide strings, case-insensitively.
int SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);                                                                               // Compare two wide strings, case-insensitively, up to a number of wchar_t.
long SDL_wcstol(const wchar_t *str, wchar_t **endp, int base);                                                                                              // Parse a `long` from a wide string.
size_t SDL_strlen(const char *str);                                                                                                                         // This works exactly like strlen() but doesn't require access to a C runtime.
size_t SDL_strnlen(const char *str, size_t maxlen);                                                                                                         // This works exactly like strnlen() but doesn't require access to a C runtime.
size_t SDL_strlcpy(char *dst, const char *src, size_t maxlen);                                                                                              // Copy a string.
size_t SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);                                                                                       // Copy an UTF-8 string.
size_t SDL_strlcat(char *dst, const char *src, size_t maxlen);                                                                                              // Concatenate strings.
char * SDL_strdup(const char *str);                                                                                                                         // Allocate a copy of a string.
char * SDL_strndup(const char *str, size_t maxlen);                                                                                                         // Allocate a copy of a string, up to n characters.
char * SDL_strrev(char *str);                                                                                                                               // Reverse a string's contents.
char * SDL_strupr(char *str);                                                                                                                               // Convert a string to uppercase.
char * SDL_strlwr(char *str);                                                                                                                               // Convert a string to lowercase.
char * SDL_strchr(const char *str, int c);                                                                                                                  // Search a string for the first instance of a specific byte.
char * SDL_strrchr(const char *str, int c);                                                                                                                 // Search a string for the last instance of a specific byte.
char * SDL_strstr(const char *haystack, const char *needle);                                                                                                // Search a string for the first instance of a specific substring.
char * SDL_strnstr(const char *haystack, const char *needle, size_t maxlen);                                                                                // Search a string, up to n bytes, for the first instance of a specific substring.
char * SDL_strcasestr(const char *haystack, const char *needle);                                                                                            // Search a UTF-8 string for the first instance of a specific substring, case-insensitively.
char * SDL_strtok_r(char *str, const char *delim, char **saveptr);                                                                                          // This works exactly like strtok_r() but doesn't require access to a C runtime.
size_t SDL_utf8strlen(const char *str);                                                                                                                     // Count the number of codepoints in a UTF-8 string.
size_t SDL_utf8strnlen(const char *str, size_t bytes);                                                                                                      // Count the number of codepoints in a UTF-8 string, up to n bytes.
char * SDL_itoa(int value, char *str, int radix);                                                                                                           // Convert an integer into a string.
char * SDL_uitoa(unsigned int value, char *str, int radix);                                                                                                 // Convert an unsigned integer into a string.
char * SDL_ltoa(long value, char *str, int radix);                                                                                                          // Convert a long integer into a string.
char * SDL_ultoa(unsigned long value, char *str, int radix);                                                                                                // Convert an unsigned long integer into a string.
char * SDL_lltoa(long long value, char *str, int radix);                                                                                                    // Convert a long long integer into a string.
char * SDL_ulltoa(unsigned long long value, char *str, int radix);                                                                                          // Convert an unsigned long long integer into a string.
int SDL_atoi(const char *str);                                                                                                                              // Parse an `int` from a string.
double SDL_atof(const char *str);                                                                                                                           // Parse a `double` from a string.
long SDL_strtol(const char *str, char **endp, int base);                                                                                                    // Parse a `long` from a string.
unsigned long SDL_strtoul(const char *str, char **endp, int base);                                                                                          // Parse an `unsigned long` from a string.
long long SDL_strtoll(const char *str, char **endp, int base);                                                                                              // Parse a `long long` from a string.
unsigned long long SDL_strtoull(const char *str, char **endp, int base);                                                                                    // Parse an `unsigned long long` from a string.
double SDL_strtod(const char *str, char **endp);                                                                                                            // Parse a `double` from a string.
int SDL_strcmp(const char *str1, const char *str2);                                                                                                         // Compare two null-terminated UTF-8 strings.
int SDL_strncmp(const char *str1, const char *str2, size_t maxlen);                                                                                         // Compare two UTF-8 strings up to a number of bytes.
int SDL_strcasecmp(const char *str1, const char *str2);                                                                                                     // Compare two null-terminated UTF-8 strings, case-insensitively.
int SDL_strncasecmp(const char *str1, const char *str2, size_t maxlen);                                                                                     // Compare two UTF-8 strings, case-insensitively, up to a number of bytes.
char * SDL_strpbrk(const char *str, const char *breakset);                                                                                                  // Searches a string for the first occurence of any character contained in a breakset, and returns a pointer from the string to that character.
Uint32 SDL_StepUTF8(const char **pstr, size_t *pslen);                                                                                                      // Decode a UTF-8 string, one Unicode codepoint at a time.
Uint32 SDL_StepBackUTF8(const char *start, const char **pstr);                                                                                              // Decode a UTF-8 string in reverse, one Unicode codepoint at a time.
char * SDL_UCS4ToUTF8(Uint32 codepoint, char *dst);                                                                                                         // Convert a single Unicode codepoint to UTF-8.
int SDL_sscanf(const char *text, const char *fmt, ... ...);                                                                                                 // This works exactly like sscanf() but doesn't require access to a C runtime.
int SDL_vsscanf(const char *text, const char *fmt, va_list ap);                                                                                             // This works exactly like vsscanf() but doesn't require access to a C runtime.
int SDL_snprintf(char *text, size_t maxlen, const char *fmt, ... ...);                                                                                      // This works exactly like snprintf() but doesn't require access to a C runtime.
int SDL_swprintf(wchar_t *text, size_t maxlen, const wchar_t *fmt, ... ...);                                                                                // This works exactly like swprintf() but doesn't require access to a C runtime.
int SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);                                                                                  // This works exactly like vsnprintf() but doesn't require access to a C runtime.
int SDL_vswprintf(wchar_t *text, size_t maxlen, const wchar_t *fmt, va_list ap);                                                                            // This works exactly like vswprintf() but doesn't require access to a C runtime.
int SDL_asprintf(char **strp, const char *fmt, ... ...);                                                                                                    // This works exactly like asprintf() but doesn't require access to a C runtime.
int SDL_vasprintf(char **strp, const char *fmt, va_list ap);                                                                                                // This works exactly like vasprintf() but doesn't require access to a C runtime.
void SDL_srand(Uint64 seed);                                                                                                                                // Seeds the pseudo-random number generator.
Sint32 SDL_rand(Sint32 n);                                                                                                                                  // Generate a pseudo-random number less than n for positive n
float SDL_randf(void);                                                                                                                                      // Generate a uniform pseudo-random floating point number less than 1.0
Uint32 SDL_rand_bits(void);                                                                                                                                 // Generate 32 pseudo-random bits.
Sint32 SDL_rand_r(Uint64 *state, Sint32 n);                                                                                                                 // Generate a pseudo-random number less than n for positive n
float SDL_randf_r(Uint64 *state);                                                                                                                           // Generate a uniform pseudo-random floating point number less than 1.0
Uint32 SDL_rand_bits_r(Uint64 *state);                                                                                                                      // Generate 32 pseudo-random bits.
double SDL_acos(double x);                                                                                                                                  // Compute the arc cosine of `x`.
float SDL_acosf(float x);                                                                                                                                   // Compute the arc cosine of `x`.
double SDL_asin(double x);                                                                                                                                  // Compute the arc sine of `x`.
float SDL_asinf(float x);                                                                                                                                   // Compute the arc sine of `x`.
double SDL_atan(double x);                                                                                                                                  // Compute the arc tangent of `x`.
float SDL_atanf(float x);                                                                                                                                   // Compute the arc tangent of `x`.
double SDL_atan2(double y, double x);                                                                                                                       // Compute the arc tangent of `y / x`, using the signs of x and y to adjust the result's quadrant.
float SDL_atan2f(float y, float x);                                                                                                                         // Compute the arc tangent of `y / x`, using the signs of x and y to adjust the result's quadrant.
double SDL_ceil(double x);                                                                                                                                  // Compute the ceiling of `x`.
float SDL_ceilf(float x);                                                                                                                                   // Compute the ceiling of `x`.
double SDL_copysign(double x, double y);                                                                                                                    // Copy the sign of one floating-point value to another.
float SDL_copysignf(float x, float y);                                                                                                                      // Copy the sign of one floating-point value to another.
double SDL_cos(double x);                                                                                                                                   // Compute the cosine of `x`.
float SDL_cosf(float x);                                                                                                                                    // Compute the cosine of `x`.
double SDL_exp(double x);                                                                                                                                   // Compute the exponential of `x`.
float SDL_expf(float x);                                                                                                                                    // Compute the exponential of `x`.
double SDL_fabs(double x);                                                                                                                                  // Compute the absolute value of `x`
float SDL_fabsf(float x);                                                                                                                                   // Compute the absolute value of `x`
double SDL_floor(double x);                                                                                                                                 // Compute the floor of `x`.
float SDL_floorf(float x);                                                                                                                                  // Compute the floor of `x`.
double SDL_trunc(double x);                                                                                                                                 // Truncate `x` to an integer.
float SDL_truncf(float x);                                                                                                                                  // Truncate `x` to an integer.
double SDL_fmod(double x, double y);                                                                                                                        // Return the floating-point remainder of `x / y`
float SDL_fmodf(float x, float y);                                                                                                                          // Return the floating-point remainder of `x / y`
int SDL_isinf(double x);                                                                                                                                    // Return whether the value is infinity.
int SDL_isinff(float x);                                                                                                                                    // Return whether the value is infinity.
int SDL_isnan(double x);                                                                                                                                    // Return whether the value is NaN.
int SDL_isnanf(float x);                                                                                                                                    // Return whether the value is NaN.
double SDL_log(double x);                                                                                                                                   // Compute the natural logarithm of `x`.
float SDL_logf(float x);                                                                                                                                    // Compute the natural logarithm of `x`.
double SDL_log10(double x);                                                                                                                                 // Compute the base-10 logarithm of `x`.
float SDL_log10f(float x);                                                                                                                                  // Compute the base-10 logarithm of `x`.
double SDL_modf(double x, double *y);                                                                                                                       // Split `x` into integer and fractional parts
float SDL_modff(float x, float *y);                                                                                                                         // Split `x` into integer and fractional parts
double SDL_pow(double x, double y);                                                                                                                         // Raise `x` to the power `y`
float SDL_powf(float x, float y);                                                                                                                           // Raise `x` to the power `y`
double SDL_round(double x);                                                                                                                                 // Round `x` to the nearest integer.
float SDL_roundf(float x);                                                                                                                                  // Round `x` to the nearest integer.
long SDL_lround(double x);                                                                                                                                  // Round `x` to the nearest integer representable as a long
long SDL_lroundf(float x);                                                                                                                                  // Round `x` to the nearest integer representable as a long
double SDL_scalbn(double x, int n);                                                                                                                         // Scale `x` by an integer power of two.
float SDL_scalbnf(float x, int n);                                                                                                                          // Scale `x` by an integer power of two.
double SDL_sin(double x);                                                                                                                                   // Compute the sine of `x`.
float SDL_sinf(float x);                                                                                                                                    // Compute the sine of `x`.
double SDL_sqrt(double x);                                                                                                                                  // Compute the square root of `x`.
float SDL_sqrtf(float x);                                                                                                                                   // Compute the square root of `x`.
double SDL_tan(double x);                                                                                                                                   // Compute the tangent of `x`.
float SDL_tanf(float x);                                                                                                                                    // Compute the tangent of `x`.
SDL_iconv_t SDL_iconv_open(const char *tocode, const char *fromcode);                                                                                       // This function allocates a context for the specified character set conversion.
int SDL_iconv_close(SDL_iconv_t cd);                                                                                                                        // This function frees a context used for character set conversion.
size_t SDL_iconv(SDL_iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);                                             // This function converts text between encodings, reading from and writing to a buffer.
char * SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf, size_t inbytesleft);                                                   // Helper function to convert a string's encoding in one call.
bool SDL_size_mul_check_overflow(size_t a, size_t b, size_t *ret);                                                                                          // Multiply two integers, checking for overflow.
bool SDL_size_add_check_overflow(size_t a, size_t b, size_t *ret);                                                                                          // Add two integers, checking for overflow.
```
